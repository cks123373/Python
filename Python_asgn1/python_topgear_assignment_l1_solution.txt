1)
url=[www.annauniv.edu, www.google.com, www.ndtv.com, www.website.org, www.bis.org.in, www.rbi.org.in]

can use this as key url[0].split(".")[-1] in sorted ? 

sorted(url,key=lambda x:x.split(".")[-1])

--------------------------------------------------------------
2)
def checkstr(l):
	i=0
	for x in l:
		if (x[0]==x[-1] and len(x)>2):
			i=i+1
		else:
			continue

	print(i)


l1=['axa', 'xyz', 'gg', 'x', 'yyy']
checkstr(l1)


----------------------------------------------------------------

3)


def sortstr(l):
    k=list()
    for c,i in enumerate(l):
        if i[0].lower()=='x' :
            k.append(i)
    l4=[x for x in l if x not in k]
    l4.sort()
    k.sort()
    return k + l4


l3=['bbb', 'ccc', 'axx', 'xzz', 'xaa']
sortstr(l3)

['xaa', 'xzz', 'axx', 'bbb', 'ccc']

Note: "+" can add two list but "-" will not work .In set "-" will work.

-----------------------------------------------------------------------------
4)

>>> a5=[(1, 3),(3, 2), (2, 1)]

>>> a6=[(1, 7), (1, 3), (3, 4, 5), (2, 2)]
>>> a2=sorted(a5, key=lambda x: x[-1])
>>>a2
[(2, 1), (3, 2), (1, 3)]
>>> a2=sorted(a6,key=lambda x: x[-1])
>>> a2
[(2, 2), (1, 3), (3, 4, 5), (1, 7)]

----------------------------------------------------------------------------------
5) 
>>> r=[1, 2, 2, 3]
>>> r
[1, 2, 2, 3]
>>> r1=list(set(r))
>>> r1
[1, 2, 3]

-----------------------------------------------------------------
6)

bookstore={"New Arrivals":{"COOKING":["Everyday Italian","Giada De Laurentiis","2005","30.00"],"CHILDREN":["Harry Potter”, J K. Rowling","2005","29.99"],"WEB":["Learning XML","Erik T. Ray","2003","39.95"]}}

for i in bookstore['New Arrivals'].values():
      print(i)

-------------------------------------------------------------------------
7)
str1="Python is a widely used high-level programming language for general-purpose programming, created by Guido van Rossum and first released in 1991. An interpreted language, Python has a design philosophy which emphasizes code readability (notably using whitespace indentation to delimit code blocks rather than curly braces or keywords), and a syntax which allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java. The language provides constructs intended to enable writing clear programs on both a small and large scale .Python features a dynamic type system and automatic memory management and supports multiple programming paradigms, including object-oriented, imperative, functional programming, and procedural styles. It has a large and comprehensive standard library. Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation." 


def counterstr(str1):
    d=dict()
    for i in str1.split(" "):
        j=i.strip(",.()")
        if j in d.keys():
            d[j]=d[j]+1
        else:
            d[j]=1
    return d

>>counterstr(str1)

>>{'Python': 7,
 'is': 3,
 'a': 8,
 'widely': 1,
 'used': 1,
 'high-level': 1,
 'programming': 4,
 'language': 3,
 'for': 2,
 'general-purpose': 1,
 'created': 1,
 'by': 2,
 'Guido': 1,
 'van': 1,
 'Rossum': 1,
 'and': 8,
 'first': 1,
 'released': 1,
 'in': 3,
 '1991': 1,
 'An': 1,
 'interpreted': 1,
 'has': 3,
 'design': 1,
 'philosophy': 1,
 'which': 2,
 'emphasizes': 1,
 'code': 4,
 'readability': 1,
 'notably': 1,
 'using': 1,
 'whitespace': 1,
 'indentation': 1,
 'to': 4,
 'delimit': 1,
 'blocks': 1,
 'rather': 1,
 'than': 2,
 'curly': 1,
 'braces': 1,
 'or': 2,
 'keywords': 1,
 'syntax': 1,
 'allows': 1,
 'programmers': 1,
 'express': 1,
 'concepts': 1,
 'fewer': 1,
 'lines': 1,
 'of': 4,
 'possible': 1,
 'languages': 1,
 'such': 1,
 'as': 2,
 'C++': 1,
 'Java': 1,
 'The': 1,
 'provides': 1,
 'constructs': 1,
 'intended': 1,
 'enable': 1,
 'writing': 1,
 'clear': 1,
 'programs': 1,
 'on': 2,
 'both': 1,
 'small': 1,
 'large': 2,
 'scale': 1,
 'features': 1,
 'dynamic': 1,
 'type': 1,
 'system': 1,
 'automatic': 1,
 'memory': 1,
 'management': 1,
 'supports': 1,
 'multiple': 1,
 'paradigms': 1,
 'including': 1,
 'object-oriented': 1,
 'imperative': 1,
 'functional': 1,
 'procedural': 1,
 'styles': 1,
 'It': 1,
 'comprehensive': 1,
 'standard': 1,
 'library': 1,
 'interpreters': 1,
 'are': 1,
 'available': 1,
 'many': 1,
 'operating': 1,
 'systems': 2,
 'allowing': 1,
 'run': 1,
 'wide': 1,
 'variety': 1,
 'CPython': 2,
 'the': 2,
 'reference': 1,
 'implementation': 1,
 'open': 1,
 'source': 1,
 'software': 1,
 'community-based': 1,
 'development': 1,
 'model': 1,
 'do': 1,
 'nearly': 1,
 'all': 1,
 'its': 1,
 'variant': 1,
 'implementations': 1,
 'managed': 1,
 'non-profit': 1,
 'Software': 1,
 'Foundation': 1}

sort dictionary by value and pull top four -
d=counterstr(str1)
sorted(d.items(),key=lambda x:x[1],reverse=True)[0:4]

Note- Strip can't strip Bad char from middle , it only does it at the start and end char . 

-----------------------------------------------------------------------------------------------------------------
8)
str1="Python is a widely used high-level programming language for general-purpose programming, created by Guido van Rossum and first released in 1991. An interpreted language, Python has a design philosophy which emphasizes code readability (notably using whitespace indentation to delimit code blocks rather than curly braces or keywords), and a syntax which allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java. The language provides constructs intended to enable writing clear programs on both a small and large scale .Python features a dynamic type system and automatic memory management and supports multiple programming paradigms, including object-oriented, imperative, functional programming, and procedural styles. It has a large and comprehensive standard library. Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation."

def countstr(str1):
	d=dict()
	k=0
	t=0
	for i in str1.split(" "):
		j=i.strip(",.()")
		if t:
			d[k1].append(j)
			t=False
		elif k==0:
			d[j]=[]
			k=k+1
		else:
			
			if j ind.keys():
				t=1
			else:
				d[k1]=[]
				d[k1].append(j)
		k1=j
	return d

countstr(str1)

{'Python': ['has', 'features', 'interpreters', 'code', 'is', 'Software'],
 'is': ['managed'],
 'a': ['wide', 'community-based'],
 'widely': ['used'],
 'used': ['high-level'],
 'high-level': ['programming'],
 'programming': ['language', 'created', 'paradigms', 'and'],
 'language': ['for', 'Python', 'provides'],
 'for': ['general-purpose', 'many'],
 'created': ['by'],
 'by': ['Guido', 'the'],
 'Guido': ['van'],
 'van': ['Rossum'],
 'Rossum': ['and'],
 'and': ['procedural', 'comprehensive', 'has'],
 'first': ['released'],
 'released': ['in'],
 'in': ['1991', 'fewer', 'languages'],
 '1991': ['An'],
 'An': ['interpreted'],
 'design': ['philosophy'],
 'philosophy': ['which'],
 'which': ['emphasizes', 'allows'],
 'emphasizes': ['code'],
 'code': ['readability', 'blocks', 'than'],
 'readability': ['notably'],
 'notably': ['using'],
 'using': ['whitespace'],
 'whitespace': ['indentation'],
 'indentation': ['to'],
 'to': ['delimit', 'express', 'enable', 'run'],
 'blocks': ['rather'],
 'rather': ['than'],
 'than': ['possible'],
 'curly': ['braces'],
 'braces': ['or'],
 'or': ['keywords', 'Java'],
 'allows': ['programmers'],
 'express': ['concepts'],
 'fewer': ['lines'],
 'lines': ['of'],
 'languages': ['such'],
 'such': ['as'],
 'as': ['C++', 'do'],
 'Java': ['The'],
 'provides': ['constructs'],
 'constructs': ['intended'],
 'enable': ['writing'],
 'writing': ['clear'],
 'clear': ['programs'],
 'programs': ['on'],
 'on': ['both', 'a'],
 'large': ['scale'],
 'dynamic': ['type'],
 'type': ['system'],
 'automatic': ['memory'],
 'memory': ['management'],
 'supports': ['multiple'],
 'paradigms': ['including'],
 'including': ['object-oriented'],
 'object-oriented': ['imperative'],
 'imperative': ['functional'],
 'procedural': ['styles'],
 'styles': ['It'],
 'It': ['has'],
 'comprehensive': ['standard'],
 'standard': ['library'],
 'interpreters': ['are'],
 'are': ['available'],
 'many': ['operating'],
 'operating': ['systems'],
 'systems': ['allowing', 'CPython'],
 'wide': ['variety'],
 'variety': ['of'],
 'CPython': ['the', 'is'],
 'the': ['non-profit'],
 'reference': ['implementation'],
 'implementation': ['of'],
 'open': ['source'],
 'source': ['software'],
 'community-based': ['development'],
 'development': ['model'],
 'do': ['nearly'],
 'nearly': ['all'],
 'all': ['of'],
 'of': ['its'],
 'its': ['variant'],
 'variant': ['implementations'],
 'Software': ['Foundation']}

-----------------------------------------------------------------------------------------------------

10)

def findstep(n):
	i=0
	k=1
	while i<n:
		if i+k==n:
			k=k+1
			break
		elif i+k>n:
			i=i-k
			k=k+1
		else:
			i=i+k
			k=k+1
	return k-1

findstep(1)
>>1

findstep(2)
>>3

findstep(3)
>>2

findstep(5)
>>6

findstep(1000000000)
>>121600










